import React, { useState, useCallback, useEffect } from 'react';
import { NewProposalData, AlertType } from '../types';
import { generateProposalText as generateDescriptionWithGemini } from '../services/geminiService';
import LoadingSpinner from './LoadingSpinner';

interface CreateProposalModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreate: (newProposalData: NewProposalData) => Promise<void>;
  addAlert: (message: string, type: AlertType) => void;
}

const CreateProposalModal: React.FC<CreateProposalModalProps> = ({ isOpen, onClose, onCreate, addAlert }) => {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [createdBy, setCreatedBy] = useState('');
  const [isGeneratingDescription, setIsGeneratingDescription] = useState(false);
  const [aiTopic, setAiTopic] = useState('');

  // Use an effect to control the modal's open state for DaisyUI
  useEffect(() => {
    const modal = document.getElementById('create_proposal_modal') as HTMLDialogElement | null;
    if (modal) {
      if (isOpen) {
        modal.showModal();
      } else {
        modal.close();
      }
    }
  }, [isOpen]);

  const handleModalClose = () => {
    // Reset form fields when modal is programmatically closed
    setTitle('');
    setDescription('');
    setCreatedBy('');
    setAiTopic('');
    onClose();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title.trim() || !description.trim() || !createdBy.trim()) {
      addAlert("All fields (Title, Description, Your Name/Group) are required.", AlertType.ERROR);
      return;
    }
    await onCreate({ title, description, createdBy });
    // Fields are reset in handleModalClose, which is called after successful create by onClose()
  };

  const handleGenerateDescription = useCallback(async () => {
    if (!aiTopic.trim()) {
      addAlert("Please enter a topic or brief idea for AI generation.", AlertType.ERROR);
      return;
    }
    setIsGeneratingDescription(true);
    try {
      const generatedDesc = await generateDescriptionWithGemini(aiTopic);
      setDescription(generatedDesc);
      addAlert("Description generated by AI!", AlertType.SUCCESS);
    } catch (error) {
      console.error("Failed to generate description with AI:", error);
      addAlert(`AI generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`, AlertType.ERROR);
    } finally {
      setIsGeneratingDescription(false);
    }
  }, [aiTopic, addAlert]);

  return (
    <dialog id="create_proposal_modal" className="modal modal-bottom sm:modal-middle">
      <div className="modal-box prose-sm md:prose-base">
        <form method="dialog">
          {/* if there is a button in form, it will close the modal */}
          <button className="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" onClick={handleModalClose}>âœ•</button>
        </form>
        <h2 className="text-2xl font-semibold text-primary mb-6">Create New Proposal</h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="proposalTitle" className="label">
              <span className="label-text">Proposal Title</span>
            </label>
            <input
              type="text"
              id="proposalTitle"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="input input-bordered w-full"
              placeholder="E.g., Fund Public Art Installation"
              required
            />
          </div>

          <div className="space-y-2 p-4 border border-base-300 rounded-md bg-base-200">
            <label htmlFor="aiTopic" className="label">
                <span className="label-text">Topic for AI Description (Optional)</span>
            </label>
            <div className="join w-full">
              <input
                type="text"
                id="aiTopic"
                value={aiTopic}
                onChange={(e) => setAiTopic(e.target.value)}
                className="input input-bordered join-item w-full"
                placeholder="Enter a keyword or brief idea..."
              />
              <button
                type="button"
                onClick={handleGenerateDescription}
                disabled={isGeneratingDescription}
                className="btn btn-info join-item min-w-[120px]"
              >
                {isGeneratingDescription ? <LoadingSpinner /> : (
                  <>
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-1 hidden sm:inline-block">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904 9 18.75l-.813-2.846a4.5 4.5 0 0 0-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 0 0 3.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 0 0 3.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 0 0-3.09 3.09ZM18.259 8.715 18 9.75l-.259-1.035a3.375 3.375 0 0 0-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 0 0 2.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 0 0 2.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 0 0-2.456 2.456Z" />
                    </svg>
                    Generate
                  </>
                )}
              </button>
            </div>
          </div>
          
          <div>
            <label htmlFor="proposalDescription" className="label">
                <span className="label-text">Description</span>
            </label>
            <textarea
              id="proposalDescription"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={5}
              className="textarea textarea-bordered w-full"
              placeholder="Clearly describe the proposal, its goals, and potential impact..."
              required
            />
          </div>

          <div>
            <label htmlFor="proposalCreator" className="label">
                <span className="label-text">Your Name / Group Name</span>
            </label>
            <input
              type="text"
              id="proposalCreator"
              value={createdBy}
              onChange={(e) => setCreatedBy(e.target.value)}
              className="input input-bordered w-full"
              placeholder="E.g., Jane Doe or Community Action Group"
              required
            />
          </div>
          
          <div className="modal-action mt-8">
             <button
              type="button"
              onClick={handleModalClose}
              className="btn btn-ghost"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="btn btn-primary"
            >
              Create Proposal
            </button>
          </div>
        </form>
      </div>
       {/* Allow closing by clicking backdrop */}
       <form method="dialog" className="modal-backdrop">
        <button onClick={handleModalClose}>close</button>
      </form>
    </dialog>
  );
};

export default CreateProposalModal;